"use strict";(self.webpackChunkto_do_list_structure=self.webpackChunkto_do_list_structure||[]).push([[179],{615:(n,e,t)=>{var i=t(892),r=t.n(i),o=t(760),a=t.n(o),A=t(311),s=t.n(A),c=t(192),d=t.n(c),l=t(60),p=t.n(l),u=t(865),f=t.n(u),m=t(802),E={};E.styleTagTransform=f(),E.setAttributes=d(),E.insert=s().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=p(),r()(m.Z,E),m.Z&&m.Z.locals&&m.Z.locals;class C{static displayToDo(){[{description:"Read a book",completed:!1,index:0},{description:"Read the bible",completed:!1,index:1},{description:"Write my daily plan",completed:!1,index:2},{description:"Attend Microverse Classes",completed:!1,index:3}].forEach((n=>C.addTodo(n)))}static addTodo(n){const e=document.querySelector(".list"),t=document.createElement("li");t.classList.add("items"),t.innerHTML=`\n    <li class="listItems">\n                <input type="checkbox" name="select" id="" class="check" />\n                <p class="title">${n.description}</p>\n                <i id="moreicon" class="fa-solid fa-ellipsis-vertical"></i>\n              </li>\n    `,e.appendChild(t)}}document.addEventListener("DOMContentLoaded",C.displayToDo())},802:(n,e,t)=>{t.d(e,{Z:()=>A});var i=t(559),r=t.n(i),o=t(476),a=t.n(o)()(r());a.push([n.id,"body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.todo-form {\n  box-shadow: 0 4px 4px 4px rgba(216, 216, 216, 0.762);\n  border: 0.2px solid rgba(216, 216, 216, 0.762);\n  width: 80vw;\n  background: white;\n  margin-top: 10vh;\n}\n\n.title {\n  display: flex;\n  align-items: center;\n}\n\nh3 {\n  padding: 3% 0;\n  font-size: 1.2rem;\n  margin: 0;\n  color: rgb(119, 119, 119);\n  font-weight: 600;\n  width: 90.1%;\n}\n\n.input {\n  outline: none;\n  width: 90%;\n  border: none;\n  background: none;\n  font-style: italic;\n  font-size: 1.2rem;\n  padding: 2% 0;\n}\n\n.list {\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n}\n\n.listItems {\n  width: 100vw;\n}\n\nlist li p {\n  display: flex;\n  justify-content: flex-start;\n  width: 87%;\n}\n\nh3,\ninput {\n  margin-left: 4% !important;\n}\n\n.list li {\n  padding: 16px;\n  border-bottom: 0.5px solid rgba(207, 207, 207, 0.762);\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\ninput.check {\n  width: 1rem;\n  height: 1rem;\n  margin-right: 2%;\n}\n\n.remove {\n  padding: 0;\n  height: 1rem;\n}\n\n.btn-clear-all {\n  width: 100%;\n  margin: 0;\n  padding: 2%;\n  text-align: center;\n  background: rgba(239, 239, 239, 0.887);\n  border: none;\n  color: rgb(97, 97, 97);\n  font-size: 1rem;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,oDAAoD;EACpD,8CAA8C;EAC9C,WAAW;EACX,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,iBAAiB;EACjB,SAAS;EACT,yBAAyB;EACzB,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,UAAU;EACV,YAAY;EACZ,gBAAgB;EAChB,kBAAkB;EAClB,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,2BAA2B;EAC3B,UAAU;AACZ;;AAEA;;EAEE,0BAA0B;AAC5B;;AAEA;EACE,aAAa;EACb,qDAAqD;EACrD,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,UAAU;EACV,YAAY;AACd;;AAEA;EACE,WAAW;EACX,SAAS;EACT,WAAW;EACX,kBAAkB;EAClB,sCAAsC;EACtC,YAAY;EACZ,sBAAsB;EACtB,eAAe;AACjB",sourcesContent:["body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n\n.todo-form {\n  box-shadow: 0 4px 4px 4px rgba(216, 216, 216, 0.762);\n  border: 0.2px solid rgba(216, 216, 216, 0.762);\n  width: 80vw;\n  background: white;\n  margin-top: 10vh;\n}\n\n.title {\n  display: flex;\n  align-items: center;\n}\n\nh3 {\n  padding: 3% 0;\n  font-size: 1.2rem;\n  margin: 0;\n  color: rgb(119, 119, 119);\n  font-weight: 600;\n  width: 90.1%;\n}\n\n.input {\n  outline: none;\n  width: 90%;\n  border: none;\n  background: none;\n  font-style: italic;\n  font-size: 1.2rem;\n  padding: 2% 0;\n}\n\n.list {\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n}\n\n.listItems {\n  width: 100vw;\n}\n\nlist li p {\n  display: flex;\n  justify-content: flex-start;\n  width: 87%;\n}\n\nh3,\ninput {\n  margin-left: 4% !important;\n}\n\n.list li {\n  padding: 16px;\n  border-bottom: 0.5px solid rgba(207, 207, 207, 0.762);\n  font-size: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\ninput.check {\n  width: 1rem;\n  height: 1rem;\n  margin-right: 2%;\n}\n\n.remove {\n  padding: 0;\n  height: 1rem;\n}\n\n.btn-clear-all {\n  width: 100%;\n  margin: 0;\n  padding: 2%;\n  text-align: center;\n  background: rgba(239, 239, 239, 0.887);\n  border: none;\n  color: rgb(97, 97, 97);\n  font-size: 1rem;\n}\n"],sourceRoot:""}]);const A=a},476:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",i=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),i&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),i&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,i,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(i)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);i&&a[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},559:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},892:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var o={},a=[],A=0;A<n.length;A++){var s=n[A],c=i.base?s[0]+i.base:s[0],d=o[c]||0,l="".concat(c," ").concat(d);o[c]=d+1;var p=t(l),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=r(u,i);i.byIndex=A,e.splice(A,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=i(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var A=t(o[a]);e[A].references--}for(var s=i(n,r),c=0;c<o.length;c++){var d=t(o[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=s}}},311:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},60:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},192:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},760:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,r&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},865:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=615)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,